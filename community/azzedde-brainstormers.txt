Directory structure:
└── azzedde-brainstormers/
    ├── readme.md
    ├── app.py
    ├── pyproject.toml
    ├── requirements.txt
    ├── utils.py
    ├── methods/
    │   ├── big_mind_mapping.py
    │   ├── reverse_brainstorm.py
    │   ├── role_storming.py
    │   ├── scamper.py
    │   ├── six_hats.py
    │   ├── starburtsting.py
    │   └── __pycache__/
    └── .devcontainer/
        └── devcontainer.json

================================================
FILE: readme.md
================================================
# 🧠 Brainstormers

Built with **LangChain** and **Streamlit**, this tool enhances your brainstorming experience by offering curated, optimized chains inspired by real-world effective brainstorming techniques. Rather than using ChatGPT directly, this app allows you to engage with structured brainstorming methods, guiding you to explore ideas comprehensively and maximize the benefits of LLM-driven brainstorming.

This app provides various brainstorming techniques:
- **[Big Mind Mapping](https://arxiv.org/abs/2310.19275)**: Expands ideas across a wide scope, ideal for when you need to gather a maximum number of ideas.
- **[Reverse Brainstorming](https://info.orchidea.dev/innovation-blog/guide-to-ai-powered-brainstorming-sessions)**: Identifies ways to create a problem, revealing potential pitfalls and fostering innovative solutions.
- **[Role Storming](https://www.psychologytoday.com/us/blog/the-digital-self/202403/how-ai-can-transform-brainstorming)**: Encourages adopting different perspectives to gather diverse insights.
- **[SCAMPER](https://www.interaction-design.org/literature/article/learn-how-to-use-the-best-ideation-methods-scamper)**: Applies the SCAMPER technique (Substitute, Combine, Adapt, Modify, Put to another use, Eliminate, Reverse) to prompt unique ideas.
- **[Six Thinking Hats](https://www.groupmap.com/portfolio/six-thinking-hats)**: Based on Edward de Bono’s method, examines ideas from six angles: Data, Emotions, Risks, Benefits, Creativity, and Process Management.
- **[Starbursting](https://lucidspark.com/blog/how-to-use-starbursting-for-brainstorming)**: Generates questions using the 5 W's and 1 H (Who, What, Where, When, Why, How), offering in-depth topic exploration.

## Web App
You can find the deployed app and test it directly here: https://brainstormers-2x7cxamrj2ngjbadgzthi4.streamlit.app/
## Project Pipeline
The app’s pipeline is streamlined: instead of using agents or Langraph, it runs specific chains based on the selected brainstorming method. Each method initiates a structured chain tailored to the user’s choice. The output is organized into a tree of ideas, with an initial layer of ideas followed by deeper expansions as per each method's principles. For example, the Starbursting method generates detailed questions for each initial idea, followed by answers.
![Screenshot from 2024-11-02 20-51-40](https://github.com/user-attachments/assets/a703a222-2e5d-41ea-a7f9-be9a94add57a)

## Video Demo

https://github.com/user-attachments/assets/681a3a87-da52-482d-904f-3731c9679ca1

## Usage

1. **Clone the repository**:
   ```bash
   git clone https://github.com/Azzedde/brainstormers
   ```
2. **Navigate to the project directory**:
   ```bash
   cd brainstormers
   ```
3. **Install dependencies**:
   ```bash
   pip install -r requirements.txt
   ```
4. **Run the app**:
   ```bash
   streamlit run ./app.py
   ```

## Roadmap
Future improvements include:
- [ ] Streamable output for real-time interaction
- [ ] Deployment on HuggingFace
- [ ] Integration with local LLMs
- [ ] Optimized runtime for Big Mind Mapping

## Cost
This app is cost-effective, with Big Mind Mapping sessions costing around $0.01 per session, making it accessible and powerful for brainstorming needs.

## Possible Collaboration

This project represents the initial step toward creating a comprehensive tool, game, or drag-and-drop software with significant potential for businesses and individuals. To bring this vision to life, I'm seeking collaborators or sponsors who are interested in contributing to its growth. As I currently lack the budget and advanced software engineering skills to fully develop it on my own, your support could be invaluable. If you're interested in collaborating or sponsoring this project, please feel free to reach out!



================================================
FILE: app.py
================================================
import streamlit as st
from methods.big_mind_mapping import bmm
from methods.reverse_brainstorm import rb
from methods.role_storming import rs
from methods.scamper import sc
from methods.six_hats import sh
from methods.starburtsting import sb
from langchain_openai import ChatOpenAI

# Make the layout wide for better display
st.set_page_config(page_title="🧠 Brainstormers", layout="wide")

# Sidebar for API key input
st.sidebar.title("⚙️ Settings")
api_key = st.sidebar.text_input("Enter your OpenAI API Key:", type="password")

# Check if API key is provided
if api_key:
    # Initialize the OpenAI model with the API key
    llm = ChatOpenAI(model="gpt-4o-mini", api_key=api_key)
    
    # App title and description
    st.title("🧠 Brainstormers")
    st.write("Welcome! Choose a brainstorming mode to start generating ideas for your project.")

    # Define the brainstorming modes, their corresponding functions, and descriptions
    modes = {
        "Big Mind Mapping": {
            "function": lambda query: bmm(query, llm),
            "description": "This involves creating a tree of ideas to explore the maximum amount of ideas in a very wide area. "
                           "This is perfect when you are lost and want to gather the maximum number of ideas."
        },
        "Reverse Brainstorming": {
            "function": lambda query: rb(query, llm),
            "description": "Instead of focusing on solutions, this technique involves identifying ways to cause a problem or "
                           "achieve the opposite effect. Perfect for spotting potential issues and coming up with innovative solutions."
        },
        "Role Storming": {
            "function": lambda query: rs(query, llm),
            "description": "Involves adopting the perspective of someone else to generate ideas. Great for gathering insights from different viewpoints."
        },
        "SCAMPER": {
            "function": lambda query: sc(query, llm),  # Pass `llm` to `sc`
            "description": "SCAMPER stands for Substitute, Combine, Adapt, Modify, Put to another use, Eliminate, and Reverse. "
                           "This method encourages thinking from multiple perspectives to generate diverse ideas."
        },
        "Six Thinking Hats": {
            "function": lambda query: sh(query, llm),
            "description": "This method, developed by Edward de Bono, looks at a problem from six different perspectives: "
                           "White (Data), Red (Emotions), Black (Risks), Yellow (Benefits), Green (Creativity), and Blue (Process management)."
        },
        "Starbursting": {
            "function": lambda query: sb(query, llm),
            "description": "Focuses on generating questions rather than answers using the 5 W's and 1 H (Who, What, Where, When, Why, How). "
                           "Ideal for comprehensive topic exploration."
        }
    }

    # Mode selection
    mode_choice = st.selectbox("Select a brainstorming mode:", list(modes.keys()))

    # Display the description of the selected mode
    if mode_choice:
        st.write(f"**Mode selected:** {mode_choice}")
        st.write(modes[mode_choice]["description"])  # Display mode description

        # User input for idea description
        user_query = st.text_area("Describe your idea in detail to get started:",
                                  "I want idea projects using LangChain that involves AI Agents and that solves social problems.")

        # Button to start the brainstorming process
        if st.button("Generate Ideas"):
            # Display a loading message
            with st.spinner("Generating ideas, please wait..."):
                # Call the function for the selected mode
                result = modes[mode_choice]["function"](user_query)
            
            # Display the result in markdown format
            st.markdown(result)
else:
    # Display a message asking for the API key
    st.title("🧠 Brainstormers")
    st.write("Unlock creative brainstorming methods like Big Mind Mapping, SCAMPER, and Role Storming to spark new ideas. Just add your OpenAI API Key in the sidebar to get started!")



================================================
FILE: pyproject.toml
================================================
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "brainstorming_app"
version = "0.1.0"
description = "A LangChain and Streamlit app for optimized brainstorming using structured methods."
authors = [
    {name = "AIT SAID Azzedine Idir", email = "ja_aitsaid@esi.dz"}
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["brainstorming", "langchain", "streamlit", "LLM"]

dependencies = [
    "langchain_core==0.3.15",
    "langchain_openai==0.2.5",
    "python-dotenv==1.0.1",
    "streamlit==1.38.0"
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88


[tool.isort]
profile = "black"

[tool.mypy]
strict = true



================================================
FILE: requirements.txt
================================================
langchain_core==0.3.15
langchain_openai==0.2.5
python-dotenv==1.0.1
streamlit==1.38.0



================================================
FILE: utils.py
================================================

from langchain_core.prompts import ChatPromptTemplate
from langchain_core.messages import AIMessage
from langchain_core.output_parsers import StrOutputParser


gen_ideas_prompt = ChatPromptTemplate.from_template("""You are a clever work assistant that helps people generate ideas for their project, research, paper or any other creative work. You'll be having a query from the user and you need to generate 5 (five) diverse, detailed, developed, precise and significant ideas related to the context of the query. The ideas should not be redundant and repetitive, be creative and unique. The ideas must be formatted in the form of bullet points without titles and without bold text.
Query:{query}
List of 5 bullet points ideas:""")


# parsers
def parse_bullet_points(ai_message: AIMessage) -> list:
    # Extract the content from the AIMessage object
    content = ai_message.content

    # Split the content into lines
    lines = content.split('\n')

    # Initialize an empty list to hold the parsed bullet points
    bullet_points = []

    # Iterate over each line
    for line in lines:
        # Strip leading and trailing whitespace
        stripped_line = line.strip()

        # Check if the line starts with a bullet point indicator
        if stripped_line.startswith('- '):
            # Remove the bullet point indicator and any leading/trailing whitespace
            bullet_point = stripped_line[2:].strip()
            # Append the cleaned bullet point to the list
            bullet_points.append(bullet_point)
        elif stripped_line.startswith('-'):
            # Handle cases where there's no space after the bullet point indicator
            bullet_point = stripped_line[1:].strip()
            bullet_points.append(bullet_point)
        elif stripped_line:
            # Handle lines that are part of a bullet point but don't start with '-'
            if bullet_points:
                # Append this line to the last bullet point, adding a space
                bullet_points[-1] += ' ' + stripped_line

    return bullet_points


class TreeNode:
    def __init__(self, idea):
        self.idea = idea
        self.children = []

    def add_child(self, child_node):
        self.children.append(child_node)

class InitialIdeaChain:
    def __init__(self, llm):
        self.gen_ideas_prompt = gen_ideas_prompt
        self.llm = llm
        self.chain = self.gen_ideas_prompt | self.llm | parse_bullet_points

    def invoke(self, query):
        self.initial_ideas = self.chain.invoke({"query": query})
        return self.initial_ideas

# print the tree creating a string representation of the tree
def print_tree(node, indent=0, is_root=True):
    # Skip the root node by only printing its children
    string = ""
    if not is_root:
        string += "  " * indent + "- " + node.idea + "\n"
    for child in node.children:
        string += print_tree(child, indent + 1, is_root=False)
    return string



================================================
FILE: methods/big_mind_mapping.py
================================================
from langchain_core.prompts import ChatPromptTemplate
from utils import parse_bullet_points, TreeNode, print_tree, InitialIdeaChain

mm_expand_idea_prompt = ChatPromptTemplate.from_template("""You are a clever idea expansion assistant that helps people expand one idea into 5 other related ideas. The resulting ideas should be diverse, detailed, developed, precise and significant. The ideas should not be redundant and repetitive, be creative and unique. The ideas must be formatted in the form of bullet points without titles and without bold text.
Idea to expand:{idea}
List of 5 bullet points ideas:""")







# Main loop
# Initialize the root node with the user's query

def bmm(user_query,llm):
    initial_idea_chain = InitialIdeaChain(llm)
    mm_expand_idea_chain = mm_expand_idea_prompt | llm | parse_bullet_points
     
    root = TreeNode(user_query)

    # Generate 10 initial ideas
    initial_ideas = initial_idea_chain.invoke({"query": user_query})

    # Add each initial idea as a child of the root
    for idea in initial_ideas:
        child_node = TreeNode(idea)
        root.add_child(child_node)

        # Expand each initial idea into 10 more ideas
        expanded_ideas = mm_expand_idea_chain.invoke({"idea": idea})

        # Add each expanded idea as a child of the current initial idea
        for expanded_idea in expanded_ideas:
            grandchild_node = TreeNode(expanded_idea)
            child_node.add_child(grandchild_node)

            # Expand each expanded idea into 10 more ideas
            further_expanded_ideas = mm_expand_idea_chain.invoke({"idea": expanded_idea})
            
            # Add each further expanded idea as a child of the current expanded idea
            for further_expanded_idea in further_expanded_ideas:
                great_grandchild_node = TreeNode(further_expanded_idea)
                grandchild_node.add_child(great_grandchild_node)

    # Print the tree
    return print_tree(root)



================================================
FILE: methods/reverse_brainstorm.py
================================================

from langchain_core.prompts import ChatPromptTemplate
from utils import parse_bullet_points, TreeNode, print_tree, InitialIdeaChain


reverse_brainstorming_prompt = ChatPromptTemplate.from_template("""
You are a perceptive problem-identification assistant that helps people analyze an idea by uncovering 5 potential issues or challenges it may encounter. The identified problems should be diverse, detailed, well-developed, precise, and significant. Avoid redundancy and repetition; ensure the problems are creative and unique. Present the problems in bullet points without titles and without bold text.

Idea to analyze: {idea}
List of 5 potential problems:
""")



# user_query = "I am searching for ideas to automate hard tasks in any company using AI agents powered by LLMs"
def rb(user_query,llm):
    initial_idea_chain = InitialIdeaChain(llm)
    reverse_brainstorming_chain = reverse_brainstorming_prompt | llm | parse_bullet_points
    root_rb = TreeNode(user_query)

    initial_ideas = initial_idea_chain.invoke({"query": user_query})

    for idea in initial_ideas:
        child_node = TreeNode(idea)
        root_rb.add_child(child_node)

        reverse_brainstorming_ideas = reverse_brainstorming_chain.invoke({"idea": idea})

        for reverse_brainstorming_idea in reverse_brainstorming_ideas:
            grandchild_node = TreeNode(reverse_brainstorming_idea)
            child_node.add_child(grandchild_node)

    return print_tree(root_rb)


================================================
FILE: methods/role_storming.py
================================================
from langchain_core.prompts import ChatPromptTemplate
from utils import parse_bullet_points, TreeNode, print_tree, InitialIdeaChain


role_storming_prompt = ChatPromptTemplate.from_template("""
You are a clever idea generator assistant that helps people brainstorm and generate ideas using the Role Storming method. This involves adopting various personas to generate diverse perspectives and enrich the brainstorming process. Each persona brings a unique approach, exploring different angles and highlighting creative possibilities.

Here’s an explanation of each persona's perspective:

- Overly Positive Persona: Enthusiastically embraces every aspect of the topic, looking for the best-case scenarios and highlighting optimistic outcomes. They encourage unbridled creativity and focus on the potential for success.
  
- Overly Negative Persona: Views the topic critically, focusing on potential pitfalls, risks, and drawbacks. This persona helps in identifying challenges and preparing solutions for potential failures or issues.

- Curious Child: Approaches the topic with pure curiosity, asking "why" and "what if" questions. They explore without limitations, bringing fresh, out-of-the-box ideas that challenge existing assumptions.

- Skeptical Analyst: Takes a detailed, logical approach, questioning every part of the topic to uncover weaknesses or risks. This persona brings depth to the analysis, ensuring that ideas are well thought out and practical.

- Visionary Futurist: Considers the long-term implications and future possibilities of the topic, imagining how it could evolve. They focus on innovative, forward-thinking perspectives, pushing boundaries and considering future trends.

Generate 5 unique ideas based on the topic provided, with each idea presented in a bullet point and link each idea to its persona’s distinct approach, exploring the topic comprehensively. Format the list in bullet points without titles or bold text.

Topic to brainstorm: {idea}
List of Role Storming ideas by persona bullet points:
""")




# user_query = "I am searching for ideas to automate hard tasks in any company using AI agents powered by LLMs"

def rs(user_query, llm):
    initial_idea_chain = InitialIdeaChain(llm)
    role_storming_chain = role_storming_prompt | llm | parse_bullet_points
    root_rs = TreeNode(user_query)

    initial_ideas = initial_idea_chain.invoke({"query": user_query})

    for idea in initial_ideas:
        child_node = TreeNode(idea)
        root_rs.add_child(child_node)

        role_storming_ideas = role_storming_chain.invoke({"idea": idea})

        for role_storming_idea in role_storming_ideas:
            grandchild_node = TreeNode(role_storming_idea)
            child_node.add_child(grandchild_node)

    return print_tree(root_rs)


================================================
FILE: methods/scamper.py
================================================
from langchain_core.prompts import ChatPromptTemplate
from utils import parse_bullet_points, TreeNode, print_tree, InitialIdeaChain

scamper_ideas_prompt = ChatPromptTemplate.from_template("""
You are a clever idea generator assistant that helps people brainstorm and generate new ideas using the SCAMPER method. SCAMPER is an activity-based thinking process that assists in developing an idea through a structured approach. Here’s how each step in SCAMPER works:

- Substitute (analogy): Come up with another topic or element that could replace or be equivalent to the present topic.
- Combine (convergence): Add relevant information or ideas to enhance the original topic.
- Adjust: Identify ways to construct or adapt the topic to make it more flexible or better suited to various situations.
- Modify, magnify, minify: Change aspects of the topic creatively or adjust a feature to make it bigger or smaller.
- Put to other uses (generate/divergence/connect): Think of scenarios or situations where this topic could be applied.
- Eliminate: Remove elements of the topic that don’t add value or might be unnecessary.
- Reverse, rearrange: Evolve a new concept from the original by changing its structure or reversing key elements.

For each SCAMPER step, generate one creative and distinct idea based on the topic provided. Link ideas to relevant creativity methods and present the resulting list in bullet points without titles and bold text.

Topic to brainstorm: {idea}
List of 7 SCAMPER ideas bullet points:
""")



def sc(user_query, llm):
    initial_idea_chain = InitialIdeaChain(llm)
    scamper_ideas_chain = scamper_ideas_prompt | llm | parse_bullet_points

    root_sc = TreeNode(user_query)

    initial_ideas = initial_idea_chain.invoke({"query": user_query})

    for idea in initial_ideas:
        child_node = TreeNode(idea)
        root_sc.add_child(child_node)

        scamper_ideas = scamper_ideas_chain.invoke({"idea": idea})

        for scamper_idea in scamper_ideas:
            grandchild_node = TreeNode(scamper_idea)
            child_node.add_child(grandchild_node)

    return print_tree(root_sc)




================================================
FILE: methods/six_hats.py
================================================
from langchain_core.prompts import ChatPromptTemplate
from utils import parse_bullet_points, TreeNode, print_tree, InitialIdeaChain

six_hats_ideas_prompt = ChatPromptTemplate.from_template("""
You are a perceptive brainstorming assistant that helps people analyze an idea using the Six Thinking Hats method, developed by Edward de Bono. This method involves examining a topic from six distinct perspectives, each represented by a colored hat. Here’s how each hat works:

- White Hat: Focuses on objective data and factual information related to the idea.
- Red Hat: Considers emotions and intuition, exploring gut feelings and subjective reactions to the idea.
- Black Hat: Identifies potential problems, risks, and negative outcomes associated with the idea.
- Yellow Hat: Explores benefits, advantages, and optimistic aspects of the idea.
- Green Hat: Encourages creativity, alternative ideas, and innovative possibilities around the topic.
- Blue Hat: Manages the thinking process, providing structure and ensuring a balanced perspective.

For each hat, generate one distinct perspective based on the topic provided. Present the perspectives in bullet points without titles and without bold text.

Topic to analyze: {idea}
List of Six Thinking Hats perspectives:
""")



def sh(user_query,llm):
    initial_idea_chain = InitialIdeaChain(llm)

    six_hats_ideas_chain = six_hats_ideas_prompt | llm | parse_bullet_points
    root_sh = TreeNode(user_query)

    initial_ideas = initial_idea_chain.invoke({"query": user_query})

    for idea in initial_ideas:
        child_node = TreeNode(idea)
        root_sh.add_child(child_node)

        six_hats_ideas = six_hats_ideas_chain.invoke({"idea": idea})

        for six_hats_idea in six_hats_ideas:
            grandchild_node = TreeNode(six_hats_idea)
            child_node.add_child(grandchild_node)

    return print_tree(root_sh)



================================================
FILE: methods/starburtsting.py
================================================

from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from utils import parse_bullet_points, TreeNode, print_tree, InitialIdeaChain


sb_questions_prompt = ChatPromptTemplate.from_template("""You are a clever question generator assistant that helps people in brainstorming and generating from one idea to 6 questions following the starbursting brainstorming principles: the 5 W's and 1 H (Who, What, Where, When, Why, How) to explore a topic comprehensively. The resulting questions should be diverse, detailed, developed, precise and significant. The questions must not be redundant and repetitive, be creative and unique. The question must be formatted in the form of bullet points without titles and without bold text.
Idea to brainstorm:{idea}
List of 6 bullet questions:""")

sb_answer_prompt = ChatPromptTemplate.from_template("""You are a clever answer assistant that helps people in answering questions related to a topic. You'll be having a question and you need to generate a detailed, developed, precise and significant answer to the question, according to a context given from the user. The answer should not be redundant and repetitive, be creative and unique. The answer must be formatted in the form of a paragraph.
Question:{question}
Context:{idea}
Answer:""")





# wrapping up the starbursting chains
def sb(user_query,llm):
    initial_idea_chain = InitialIdeaChain(llm)
    sb_questions_chain = sb_questions_prompt | llm | parse_bullet_points
    sb_answer_chain = sb_answer_prompt | llm | StrOutputParser()
    root_sb = TreeNode(user_query)

    initial_ideas = initial_idea_chain.invoke({"query": user_query})

    for idea in initial_ideas:
        child_node = TreeNode(idea)
        root_sb.add_child(child_node)

        questions = sb_questions_chain.invoke({"idea": idea})

        for question in questions:
            grandchild_node = TreeNode(question)
            child_node.add_child(grandchild_node)

            answer = sb_answer_chain.invoke({"question": question, "idea": idea})
            great_grandchild_node = TreeNode(answer)
            grandchild_node.add_child(great_grandchild_node)


    return print_tree(root_sb)






================================================
FILE: .devcontainer/devcontainer.json
================================================
{
  "name": "Python 3",
  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
  "image": "mcr.microsoft.com/devcontainers/python:1-3.11-bullseye",
  "customizations": {
    "codespaces": {
      "openFiles": [
        "README.md",
        "app.py"
      ]
    },
    "vscode": {
      "settings": {},
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance"
      ]
    }
  },
  "updateContentCommand": "[ -f packages.txt ] && sudo apt update && sudo apt upgrade -y && sudo xargs apt install -y <packages.txt; [ -f requirements.txt ] && pip3 install --user -r requirements.txt; pip3 install --user streamlit; echo '✅ Packages installed and Requirements met'",
  "postAttachCommand": {
    "server": "streamlit run app.py --server.enableCORS false --server.enableXsrfProtection false"
  },
  "portsAttributes": {
    "8501": {
      "label": "Application",
      "onAutoForward": "openPreview"
    }
  },
  "forwardPorts": [
    8501
  ]
}

